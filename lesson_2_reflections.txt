Q: What happens when you initialize a repository? Why do you need to do it?

A: When you initialize a repo, git creates the repository in the folder you're
in by creating a hidden .git directory and storing metadata in it. You need to
do it because git needs a repository to work, and the metadata is what stores
the commit history.

Q: How is the staging area different from the working directory and the
repository? What value do you think it offers?

A: The staging area is the in-between stage between files in your working
directory and files in the repository. The staging area holds all the files that
are "staged" to be in the repo, but it also holds files that will only be in the
working directory. It allows you to see what will be commited and gives you more
precise control over what files you want to commit.

Q: How can use the staging area to make sure you have one commit per logical
change?

A: You can only add the changes in one logical change (by adding those specific
files to the staging area), commit those, and then go on to the next logical
change.

Q: What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

A: A branch would be helpful in keeping history organized if you decided to
start coding a new experimental feature or you want to quickly translate your
code base. Branches would allow you to take leaps and bounds in your code that
may break your code, but with the assurance that you will always have the demo
code base ready.

Q: How do the diagrams help you visualize the branch structure?

A: Diagrams make it really easy to see the high level view of your git version
tree. It makes it easy to understand what the detached head state is, a commit
that is unreachable because it doesn't have a parent that is a current branch
head.

Q: What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

A: When you merge two branches, git will work out which lines were added and
which lines were removed based on the latest commit in each branch as well as
the parent branch for the branch that you want to merge into master. We
represent it in the diagram the way we do because we want the master branch (or
whichever other branch) to converge with the branch being merged because we want
their changes to be merged into one file.

Q: What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

A: Git's automatic merges makes your life easier and it does guesswork when Git
is reasonably sure what changes were made. However, sometimes there is a merge
conflict and that's when you need to check it manually. Sometimes, Git won't
understand if changes made were made to another function that does the same
thing. In those cases, it's better to be safe than sorry.