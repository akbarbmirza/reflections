Q: When would you want to use a remote repository rather than keeping all your
work local?

A: I would want to use a remote repository when I'd like to easily share my work
with some of my collaborators, or even make my work public (open-source or what
have you). Furthermore, remote repositories would also be a great solution to
keep my work backed up. If my local machine bursts into flames and I lose my
files, I can always just get it by cloning my GitHub repository.

Q: Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

A: You would want to pull changes manually, because you want to push changes
manually. If you haven't pushed your new changes from the local repo to the
remote, then that would cause a problem. If Git automatically kept you 
up-to-date, then you would lose any changes that hadn't been pushed to the
remote yet. This way you can also keep track of what changed properly.

Q: Describe the differences between forks, clones, and branches. When would you
use one instead of another?

A: A branch is the marker that is tied with your commits. When you do git log on
your local repository, you'll see the commits on the master branch. A clone is a
copy of a branch. A clone can be done locally or through a remote if you have
permission to clone a repo. Forks are when you make a clone of someone else's
repo on GitHub in your GitHub profile. The Fork stores some data about the repo
it was originally forked from. Any changes made on the fork won't change the
repo that has been forked. Usually, you'll make a fork if you don't have
permission to make changes to someone's repo.

Q: What is the benefit of having a copy of the last known state of the remote
stored locally?

A: One of the benefits of having a copy of the last known state of the remote
stored locally would be that git would be able to place your commit in the right
place when you use git pull or git merge. If you didn't have a copy of the last
known state of the remote stored locally, you wouldn't be able to tell how many
states ahead or behind you are from the origin/master branch when you run git
status.

Q: How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

A: To collaborate without using Git or GitHub, I would share my files in a zip
archive via USB or Email. It would be easier to access files, at first at least,
but much harder to collaborate. I wouldn't be able to easily see the changes
between file versions, or experiment with branches like I can in Git.

Q: When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

A: You would want to make changes in a separate branch if the changes you're
adding may break the current, working version of the code. Furthermore, you may
not want that code to be public yet. The benefit of using a separate branch is
that you can split your work on the main branch and on the other. You can work
on the feature without breaking the stable version, and the stable version can
be updated to include bug fixes, and stable changes. However, this means that
your other branch isn't automatically updated with the changes to the other
branch. In fact, there could even be merge conflicts which makes the process
even more confusing. However, this method is generally safer. On the other hand,
you could make the changes on master and then you don't have to worry about
going through the convoluted process to update a separate branch. However, if
you break something or you don't want something you're adding to be public yet,
you won't really have that option.